generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario    BigInt      @id
  nome          String
  email         String      @unique
  senha         String
  perfil        TipoUsuario // admin ou usuario
  data_cadastro DateTime    @default(now())
}

model Familia {
  id_familia         BigInt   @id
  nome               String // Nome da família
  numero_dependentes Int
  id_responsavel     BigInt?  @unique
  observacoes        String?
  data_cadastro      DateTime @default(now())

  responsavel Responsavel? @relation(fields: [id_responsavel], references: [id_responsavel])
  pessoas     Pessoa[]
}

model Pessoa {
  id_pessoa       BigInt   @id
  id_familia      BigInt
  nome            String
  data_nascimento DateTime
  rg              String?
  cpf             String?  @unique
  foto_url        String?
  observacoes     String? // Para anotações gerais
  ehCrianca       Boolean  @default(false)

  familia     Familia      @relation(fields: [id_familia], references: [id_familia])
  frequencias Frequencia[] // Frequência em atividades
}

model Responsavel {
  id_responsavel  BigInt   @id
  nome            String
  cpf             String   @unique
  rg              String
  data_nascimento DateTime
  telefone        String
  email           String?
  ocupacao        String?
  endereco        String
  foto_url        String?

  familia            Familia?
  cestasBeneficiario CestaBasica[] @relation("beneficiario")
}

model BeneficiarioExterno {
  id_beneficiario BigInt  @id
  nome            String
  telefone        String?
  endereco        String?
  origem          String // Ex: "Igreja"
  observacoes     String?

  cestasBeneficiario CestaBasica[]
}

model Voluntario {
  id_voluntario          BigInt   @id
  nome                   String
  cpf                    String   @unique
  rg                     String
  endereco               String
  email                  String
  telefone               String
  disponibilidade        String
  area_atuacao           String
  tem_antecedentes       Boolean  @default(false)
  url_comprovante        String? // URL do comprovante de antecedentes criminais
  respondeu_questionario Boolean  @default(false)
  aceitou_termos         Boolean  @default(false)
  data_cadastro          DateTime @default(now())

  atividades_realizadas AtividadeVoluntario[]
}

model AtividadeVoluntario {
  id_atividade      BigInt   @id
  id_voluntario     BigInt
  descricao         String
  data_realizacao   DateTime
  horas_trabalhadas Float
  observacoes       String?

  voluntario Voluntario @relation(fields: [id_voluntario], references: [id_voluntario])
}

model Parceiro {
  id_parceiro   BigInt     @id
  nome          String
  tipo_pessoa   TipoPessoa // Física ou Jurídica
  documento     String? // CPF ou CNPJ
  email         String?
  telefone      String?
  endereco      String?
  data_cadastro DateTime   @default(now())

  doacoes           Doacao[]
  servicosPrestados ServicoPrestado[]
}

model ServicoPrestado {
  id_servico  BigInt    @id
  id_parceiro BigInt
  descricao   String
  data_inicio DateTime
  data_fim    DateTime?
  observacoes String?

  parceiro Parceiro @relation(fields: [id_parceiro], references: [id_parceiro])
}

model Doacao {
  id_doacao        BigInt     @id
  id_parceiro      BigInt? // Null se for anônima
  tipo             TipoDoacao // Monetária ou Material
  valor            Decimal? // Se for monetária
  descricao        String
  data_recebimento DateTime   @default(now())
  comprovante_url  String? // URL do comprovante (ex: comprovante PIX)
  is_anonima       Boolean    @default(false)

  parceiro       Parceiro?     @relation(fields: [id_parceiro], references: [id_parceiro])
  itens_doados   ItemDoado[]
  cestas_geradas CestaBasica[]
}

model ItemDoado {
  id_item        BigInt  @id
  id_doacao      BigInt
  nome           String
  quantidade     Int
  unidade_medida String? // kg, unidade, etc.

  doacao Doacao @relation(fields: [id_doacao], references: [id_doacao])
}

model Produto {
  id_produto     BigInt  @id
  nome           String
  descricao      String?
  is_basico      Boolean @default(true) // Se é um item básico que sempre está presente
  unidade_medida String? // kg, unidade, etc.

  produtos_cesta ProdutoCesta[]
}

model CestaBasica {
  id_cesta        BigInt   @id
  id_responsavel  BigInt?
  id_beneficiario BigInt?
  id_doacao       BigInt? // Origem da cesta
  data_entrega    DateTime
  observacoes     String?

  responsavel          Responsavel?         @relation("beneficiario", fields: [id_responsavel], references: [id_responsavel])
  beneficiario_externo BeneficiarioExterno? @relation(fields: [id_beneficiario], references: [id_beneficiario])
  doacao_origem        Doacao?              @relation(fields: [id_doacao], references: [id_doacao])
  produtos             ProdutoCesta[]
}

model ProdutoCesta {
  id_produto_cesta BigInt @id
  id_cesta         BigInt
  id_produto       BigInt
  quantidade       Int

  cesta   CestaBasica @relation(fields: [id_cesta], references: [id_cesta])
  produto Produto     @relation(fields: [id_produto], references: [id_produto])
}

model Atividade {
  id_atividade   BigInt        @id
  nome           String
  descricao      String?
  tipo           TipoAtividade
  publico_alvo   String // Crianças, adultos, familiares, etc.
  dias_semana    String // Ex: "1,3,5" para segunda, quarta e sexta
  horario_inicio DateTime
  horario_fim    DateTime

  frequencias Frequencia[]
  materias    Materia[]
}

model Materia {
  id_materia   BigInt  @id
  id_atividade BigInt
  nome         String // Ex: "Português", "Matemática"
  descricao    String?

  atividade Atividade @relation(fields: [id_atividade], references: [id_atividade])
}

model Frequencia {
  id_frequencia BigInt   @id
  id_pessoa     BigInt
  id_atividade  BigInt
  data          DateTime
  presenca      Boolean
  justificativa String? // Justificativa em caso de falta

  pessoa    Pessoa    @relation(fields: [id_pessoa], references: [id_pessoa])
  atividade Atividade @relation(fields: [id_atividade], references: [id_atividade])
}

enum TipoUsuario {
  admin
  usuario
}

enum TipoPessoa {
  fisica
  juridica
}

enum TipoDoacao {
  monetaria
  material
}

enum TipoAtividade {
  roda_terapeutica
  jiu_jitsu
  aula_reforco
  psicopedagogia
  alfabetizacao_adultos
  aula_musica
  outra
}
